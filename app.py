import streamlit as st  
import requests  
import pandas as pd  
from rapidfuzz import fuzz, process  
import io  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã  
st.set_page_config(  
    page_title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–µ–æ HH.ru",  
    page_icon="üåç",  
    layout="wide"  
)  

# CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–µ–º–ª–∏ –∏ —Å—Ç–∏–ª–µ–π  
st.markdown("""  
<style>  
@keyframes rotate {  
    from { transform: rotate(0deg); }  
    to { transform: rotate(360deg); }  
}  

.rotating-earth {  
    display: inline-block;  
    animation: rotate 3s linear infinite;  
    font-size: 3em;  
    vertical-align: middle;  
    margin-right: 15px;  
}  

.main-title {  
    display: inline-block;  
    font-size: 3em;  
    font-weight: bold;  
    vertical-align: middle;  
    margin: 0;  
}  

.title-container {  
    display: flex;  
    align-items: center;  
    margin-bottom: 20px;  
}  
</style>  
""", unsafe_allow_html=True)  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state  
if 'result_df' not in st.session_state:  
    st.session_state.result_df = None  
if 'duplicate_count' not in st.session_state:  
    st.session_state.duplicate_count = 0  
if 'processed' not in st.session_state:  
    st.session_state.processed = False  
if 'manual_selections' not in st.session_state:  
    st.session_state.manual_selections = {}  
if 'candidates_cache' not in st.session_state:  
    st.session_state.candidates_cache = {}  
if 'search_query' not in st.session_state:  
    st.session_state.search_query = ""  

# ============================================  
# –°–ü–†–ê–í–û–ß–ù–ò–ö –§–ï–î–ï–†–ê–õ–¨–ù–´–• –û–ö–†–£–ì–û–í –ò –†–ï–ì–ò–û–ù–û–í  
# ============================================  
FEDERAL_DISTRICTS = {
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ú–æ—Å–∫–≤–∞"
    ],
    "–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π",
        "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    ],
    "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥"
    ],
    "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)", "–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π", "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π",
        "–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π", "–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ï–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å", "–ß—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥"
    ],
    "–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞",
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è", "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π", "–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π",
        "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π", "–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    ],
    "–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞",
        "–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥"
    ],
    "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è",
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", "–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", "–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
        "–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π", "–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
    ],
    "–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è", "–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
        "–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è ‚Äî –ê–ª–∞–Ω–∏—è",
        "–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π"
    ],
    "–ö—Ä—ã–º—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": [
        "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å"
    ]
}

# ============================================  
# –§–£–ù–ö–¶–ò–ò  
# ============================================  
@st.cache_data(ttl=3600)  
def get_hh_areas():  
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH.ru"""  
    response = requests.get('https://api.hh.ru/areas')  
    data = response.json()  
      
    areas_dict = {}  
      
    def parse_areas(areas, parent_name="", parent_id="", root_parent_id=""):  
        for area in areas:  
            area_id = area['id']  
            area_name = area['name']  
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π parent_id (—Å—Ç—Ä–∞–Ω—É)
            current_root_id = root_parent_id if root_parent_id else parent_id if parent_id else area_id
              
            areas_dict[area_name] = {  
                'id': area_id,  
                'name': area_name,  
                'parent': parent_name,
                'parent_id': parent_id,
                'root_parent_id': current_root_id  # ID —Å—Ç—Ä–∞–Ω—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            }  
              
            if area.get('areas'):  
                parse_areas(area['areas'], area_name, area_id, current_root_id)  
      
    parse_areas(data)  
    return areas_dict  
 
def get_cities_by_regions(hh_areas, selected_regions):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –†–æ—Å—Å–∏—è)"""
    cities = []
    
    # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - —á—Ç–æ –Ω–µ –≤—ã–≥—Ä—É–∂–∞—Ç—å
    excluded_names = ['–†–æ—Å—Å–∏—è', '–î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã', '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã']
    
    # ID –†–æ—Å—Å–∏–∏
    russia_id = '113'
    
    for city_name, city_info in hh_areas.items():
        parent = city_info['parent']
        root_parent_id = city_info.get('root_parent_id', '')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë, —á—Ç–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –†–æ—Å—Å–∏–∏
        if root_parent_id != russia_id:
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if city_name in excluded_names:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –≥–æ—Ä–æ–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        for region in selected_regions:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            region_normalized = region.lower().strip()
            parent_normalized = parent.lower().strip() if parent else ""
            city_normalized = city_name.lower().strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (region_normalized in parent_normalized or 
                parent_normalized in region_normalized or
                region_normalized == parent_normalized or
                region_normalized == city_normalized):
                cities.append({
                    '–ì–æ—Ä–æ–¥': city_name,
                    'ID HH': city_info['id'],
                    '–†–µ–≥–∏–æ–Ω': parent if parent else '–†–æ—Å—Å–∏—è'
                })
                break
    
    return pd.DataFrame(cities)
 
def get_all_cities(hh_areas):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ HH (—Ç–æ–ª—å–∫–æ –†–æ—Å—Å–∏—è)"""
    cities = []
    
    # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - —á—Ç–æ –Ω–µ –≤—ã–≥—Ä—É–∂–∞—Ç—å
    excluded_names = ['–†–æ—Å—Å–∏—è', '–î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã', '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã']
    
    # ID –†–æ—Å—Å–∏–∏
    russia_id = '113'
    
    for city_name, city_info in hh_areas.items():
        parent = city_info['parent']
        root_parent_id = city_info.get('root_parent_id', '')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë, —á—Ç–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –†–æ—Å—Å–∏–∏
        if root_parent_id != russia_id:
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if city_name in excluded_names:
            continue
        
        cities.append({
            '–ì–æ—Ä–æ–¥': city_name,
            'ID HH': city_info['id'],
            '–†–µ–≥–∏–æ–Ω': parent if parent else '–†–æ—Å—Å–∏—è'
        })
    
    return pd.DataFrame(cities)

def normalize_region_name(text):  
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""  
    text = text.lower()  
    replacements = {  
        '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è': '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥',  
        '–º–æ—Å–∫–æ–≤—Å–∫–∞—è': '–º–æ—Å–∫–æ–≤',  
        '–∫—É—Ä—Å–∫–∞—è': '–∫—É—Ä—Å–∫',  
        '–∫–µ–º–µ—Ä–æ–≤—Å–∫–∞—è': '–∫–µ–º–µ—Ä–æ–≤',  
        '—Å–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è': '—Å–≤–µ—Ä–¥–ª–æ–≤',  
        '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è': '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥',  
        '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è': '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',  
        '—Ç–∞–º–±–æ–≤—Å–∫–∞—è': '—Ç–∞–º–±–æ–≤',  
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞—è': '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',  
        '–æ–±–ª–∞—Å—Ç—å': '',  
        '–æ–±–ª': '',  
        '–∫—Ä–∞–π': '',  
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '',  
        '—Ä–µ—Å–ø': '',  
        '  ': ' '  
    }  
    for old, new in replacements.items():  
        text = text.replace(old, new)  
    return text.strip()  

def extract_city_and_region(text):  
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""  
    text_lower = text.lower()  
      
    region_keywords = [  
        '–æ–±–ª–∞—Å—Ç', '–∫—Ä–∞–π', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–æ–∫—Ä—É–≥',  
        '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥', '–º–æ—Å–∫–æ–≤', '–∫—É—Ä—Å–∫', '–∫–µ–º–µ—Ä–æ–≤',  
        '—Å–≤–µ—Ä–¥–ª–æ–≤', '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '—Ç–∞–º–±–æ–≤',  
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'  
    ]  
      
    words = text.split()  
      
    if len(words) == 1:  
        return text, None  
      
    city_words = []  
    region_words = []  
    region_found = False  
      
    for word in words:  
        word_lower = word.lower()  
        if not region_found and any(keyword in word_lower for keyword in region_keywords):  
            region_found = True  
            region_words.append(word)  
        elif region_found:  
            region_words.append(word)  
        else:  
            city_words.append(word)  
      
    city = ' '.join(city_words) if city_words else text  
    region = ' '.join(region_words) if region_words else None  
      
    return city, region  

def check_if_changed(original, matched):  
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""  
    if matched is None or matched == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":  
        return False  
      
    original_clean = original.strip()  
    matched_clean = matched.strip()  
      
    return original_clean != matched_clean  

def get_candidates_by_word(client_city, hh_city_names, limit=20):  
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""  
    first_word = client_city.split()[0].lower().strip()  
      
    candidates = []  
    for city_name in hh_city_names:  
        city_lower = city_name.lower()  
        if first_word in city_lower:  
            score = fuzz.WRatio(client_city.lower(), city_lower)  
            candidates.append((city_name, score))  
      
    candidates.sort(key=lambda x: x[1], reverse=True)  
      
    return candidates[:limit]  

def smart_match_city(client_city, hh_city_names, hh_areas, threshold=85):  
    """–£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""  
      
    city_part, region_part = extract_city_and_region(client_city)  
    city_part_lower = city_part.lower().strip()  
      
    word_candidates = get_candidates_by_word(client_city, hh_city_names)  
      
    if word_candidates and len(word_candidates) > 0 and word_candidates[0][1] >= threshold:  
        best_candidate = word_candidates[0]  
        return (best_candidate[0], best_candidate[1], 0), word_candidates  
      
    if not word_candidates or (word_candidates and word_candidates[0][1] < threshold):  
        return None, word_candidates  
      
    exact_matches = []  
    exact_matches_with_region = []  
      
    for hh_city_name in hh_city_names:  
        hh_city_base = hh_city_name.split('(')[0].strip().lower()  
          
        if city_part_lower == hh_city_base:  
            if region_part:  
                region_normalized = normalize_region_name(region_part)  
                hh_normalized = normalize_region_name(hh_city_name)  
                  
                if region_normalized in hh_normalized:  
                    exact_matches_with_region.append(hh_city_name)  
                else:  
                    exact_matches.append(hh_city_name)  
            else:  
                exact_matches.append(hh_city_name)  
      
    if exact_matches_with_region:  
        best_match = exact_matches_with_region[0]  
        score = fuzz.WRatio(client_city.lower(), best_match.lower())  
        return (best_match, score, 0), word_candidates  
    elif exact_matches:  
        best_match = exact_matches[0]  
        score = fuzz.WRatio(client_city.lower(), best_match.lower())  
        return (best_match, score, 0), word_candidates  
      
    candidates = process.extract(  
        client_city,  
        hh_city_names,  
        scorer=fuzz.WRatio,  
        limit=10  
    )  
      
    if not candidates:  
        return None, word_candidates  
      
    candidates = [c for c in candidates if c[1] >= threshold]  
      
    if not candidates:  
        return None, word_candidates  
      
    if len(candidates) == 1:  
        return candidates[0], word_candidates  
      
    best_match = None  
    best_score = 0  
      
    client_city_lower = client_city.lower()  
      
    for candidate_name, score, _ in candidates:  
        candidate_lower = candidate_name.lower()  
        adjusted_score = score  
          
        candidate_city = candidate_name.split('(')[0].strip().lower()  
          
        if city_part_lower == candidate_city:  
            adjusted_score += 50  
        elif city_part_lower in candidate_city:  
            adjusted_score += 30  
        elif candidate_city in city_part_lower:  
            adjusted_score += 20  
        else:  
            adjusted_score -= 30  
          
        if region_part:  
            region_normalized = normalize_region_name(region_part)  
            candidate_normalized = normalize_region_name(candidate_name)  
              
            if region_normalized in candidate_normalized:  
                adjusted_score += 40  
            elif '(' in candidate_name:  
                adjusted_score -= 25  
          
        len_diff = abs(len(candidate_city) - len(city_part_lower))  
        if len_diff > 3:  
            adjusted_score -= 20  
          
        if len(candidate_city) > len(city_part_lower) + 4:  
            adjusted_score -= 25  
          
        if len(candidate_name) > 15 and len(client_city) > 15:  
            adjusted_score += 5  
          
        region_keywords = ['–æ–±–ª–∞—Å—Ç', '–∫—Ä–∞–π', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–æ–∫—Ä—É–≥']  
        client_has_region = any(keyword in client_city_lower for keyword in region_keywords)  
        candidate_has_region = any(keyword in candidate_lower for keyword in region_keywords)  
          
        if client_has_region and candidate_has_region:  
            adjusted_score += 15  
        elif client_has_region and not candidate_has_region:  
            adjusted_score -= 15  
          
        if adjusted_score > best_score:  
            best_score = adjusted_score  
            best_match = (candidate_name, score, _)  
      
    return (best_match if best_match else candidates[0]), word_candidates  

def match_cities(client_cities, hh_areas, threshold=85):  
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""  
    results = []  
    hh_city_names = list(hh_areas.keys())  
      
    seen_original_cities = {}  
    seen_hh_cities = {}  
      
    duplicate_original_count = 0  
    duplicate_hh_count = 0  
      
    st.session_state.candidates_cache = {}  
      
    progress_bar = st.progress(0)  
    status_text = st.empty()  
      
    for idx, client_city in enumerate(client_cities):  
        progress = (idx + 1) / len(client_cities)  
        progress_bar.progress(progress)  
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx + 1} –∏–∑ {len(client_cities)} –≥–æ—Ä–æ–¥–æ–≤...")  
          
        if pd.isna(client_city) or str(client_city).strip() == "":  
            results.append({  
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city,  
                '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': None,  
                'ID HH': None,  
                '–†–µ–≥–∏–æ–Ω': None,  
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,  
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': '–ù–µ—Ç',  
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',  
                'row_id': idx  
            })  
            continue  
          
        client_city_original = str(client_city).strip()  
        client_city_normalized = client_city_original.lower().strip()  
          
        if client_city_normalized in seen_original_cities:  
            duplicate_original_count += 1  
            original_result = seen_original_cities[client_city_normalized]  
            results.append({  
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,  
                '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': original_result['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'],  
                'ID HH': original_result['ID HH'],  
                '–†–µ–≥–∏–æ–Ω': original_result['–†–µ–≥–∏–æ–Ω'],  
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': original_result['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'],  
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': original_result['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'],  
                '–°—Ç–∞—Ç—É—Å': 'üîÑ –î—É–±–ª–∏–∫–∞—Ç (–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)',  
                'row_id': idx  
            })  
            continue  
          
        match_result, candidates = smart_match_city(client_city_original, hh_city_names, hh_areas, threshold)  
          
        st.session_state.candidates_cache[idx] = candidates  
          
        if match_result:  
            matched_name = match_result[0]  
            score = match_result[1]  
            hh_info = hh_areas[matched_name]  
            hh_city_normalized = hh_info['name'].lower().strip()  
              
            is_changed = check_if_changed(client_city_original, hh_info['name'])  
            change_status = '–î–∞' if is_changed else '–ù–µ—Ç'  
              
            if hh_city_normalized in seen_hh_cities:  
                duplicate_hh_count += 1  
                city_result = {  
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,  
                    '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': hh_info['name'],  
                    'ID HH': hh_info['id'],  
                    '–†–µ–≥–∏–æ–Ω': hh_info['parent'],  
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': round(score, 1),  
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': change_status,  
                    '–°—Ç–∞—Ç—É—Å': 'üîÑ –î—É–±–ª–∏–∫–∞—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç HH)',  
                    'row_id': idx  
                }  
                results.append(city_result)  
                seen_original_cities[client_city_normalized] = city_result  
            else:  
                status = '‚úÖ –¢–æ—á–Ω–æ–µ' if score >= 95 else '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ'  
                  
                city_result = {  
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,  
                    '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': hh_info['name'],  
                    'ID HH': hh_info['id'],  
                    '–†–µ–≥–∏–æ–Ω': hh_info['parent'],  
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': round(score, 1),  
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': change_status,  
                    '–°—Ç–∞—Ç—É—Å': status,  
                    'row_id': idx  
                }  
                  
                results.append(city_result)  
                seen_original_cities[client_city_normalized] = city_result  
                seen_hh_cities[hh_city_normalized] = True  
        else:  
            city_result = {  
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,  
                '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': None,  
                'ID HH': None,  
                '–†–µ–≥–∏–æ–Ω': None,  
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,  
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': '–ù–µ—Ç',  
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ',  
                'row_id': idx  
            }  
              
            results.append(city_result)  
            seen_original_cities[client_city_normalized] = city_result  
      
    progress_bar.empty()  
    status_text.empty()  
      
    total_duplicates = duplicate_original_count + duplicate_hh_count  
      
    return pd.DataFrame(results), duplicate_original_count, duplicate_hh_count, total_duplicates  

# ============================================  
# –ò–ù–¢–ï–†–§–ï–ô–°  
# ============================================  
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–µ–º–ª–µ–π  
st.markdown(  
    '<div class="title-container">'  
    '<span class="rotating-earth">üåç</span>'  
    '<span class="main-title">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–µ–æ HH.ru</span>'  
    '</div>',  
    unsafe_allow_html=True  
)  
st.markdown("---")  

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ HH
try:  
    hh_areas = get_hh_areas()  
except Exception as e:  
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {str(e)}")  
    hh_areas = None  

# ============================================
# –ë–õ–û–ö: –°–ò–ù–•–†–û–ù–ò–ó–ê–¢–û–† –ì–û–†–û–î–û–í
# ============================================
st.header("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–æ–≤")

with st.sidebar:  
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")  
    threshold = st.slider(  
        "–ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (%)",  
        min_value=50,  
        max_value=100,  
        value=85,  
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"  
    )  
      
    st.markdown("---")  
      
    st.markdown("### üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")  
    st.markdown("""  
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**  
      
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** Excel –∏–ª–∏ CSV —Å –≥–æ—Ä–æ–¥–∞–º–∏  
    2. –ì–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ **–ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ**  
    3. –ù–∞–∂–º–∏—Ç–µ **"üöÄ –ù–∞—á–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"**  
    4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ  
    5. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ä–æ–¥–∞ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ‚â§ 90%  
    6. –°–∫–∞—á–∞–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª  
      
    **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:**  
    - –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤  
    - –û–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫—É  
    - –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–ª–∞—Å—Ç—å/—Ä–µ–≥–∏–æ–Ω  
    """)  
      
    st.markdown("---")  
    st.markdown("### üìä –°—Ç–∞—Ç—É—Å—ã")  
    st.markdown("""  
    - ‚úÖ **–¢–æ—á–Ω–æ–µ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â•95%  
    - ‚ö†Ô∏è **–ü–æ—Ö–æ–∂–µ–µ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â•–ø–æ—Ä–æ–≥–∞  
    - üîÑ **–î—É–±–ª–∏–∫–∞—Ç** - –ø–æ–≤—Ç–æ—Ä—ã  
    - ‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ <–ø–æ—Ä–æ–≥–∞  
    """)  

col1, col2 = st.columns([1, 1])  

with col1:  
    st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")  
    uploaded_file = st.file_uploader(  
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏",  
        type=['xlsx', 'csv'],  
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx) –∏ CSV"  
    )  
      
    with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"):  
        example_df = pd.DataFrame({  
            '': ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫']  
        })  
        st.dataframe(example_df, use_container_width=True, hide_index=True)  

with col2:  
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")  
    if hh_areas:
        st.success(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH –∑–∞–≥—Ä—É–∂–µ–Ω: **{len(hh_areas)}** –≥–æ—Ä–æ–¥–æ–≤")  

if uploaded_file is not None and hh_areas is not None:  
    st.markdown("---")  
      
    try:  
        if uploaded_file.name.endswith('.csv'):  
            df = pd.read_csv(uploaded_file, header=None)  
        else:  
            df = pd.read_excel(uploaded_file, header=None)  
          
        client_cities = df.iloc[:, 0].tolist()  
        st.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ **{len(client_cities)}** –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")  
          
        if st.button("üöÄ –ù–∞—á–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", type="primary", use_container_width=True):  
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."):  
                result_df, dup_original, dup_hh, total_dup = match_cities(client_cities, hh_areas, threshold)  
                st.session_state.result_df = result_df  
                st.session_state.dup_original = dup_original  
                st.session_state.dup_hh = dup_hh  
                st.session_state.total_dup = total_dup  
                st.session_state.processed = True  
                st.session_state.manual_selections = {}  
                st.session_state.search_query = ""  
          
        if st.session_state.processed and st.session_state.result_df is not None:  
            result_df = st.session_state.result_df.copy()  
            dup_original = st.session_state.dup_original  
            dup_hh = st.session_state.dup_hh  
            total_dup = st.session_state.total_dup  
              
            st.markdown("---")  
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")  
              
            col1, col2, col3, col4, col5, col6 = st.columns(6)  
              
            total = len(result_df)  
            exact = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚úÖ –¢–æ—á–Ω–æ–µ'])  
            similar = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ'])  
            duplicates = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)])  
            not_found = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'])  
              
            to_export = len(result_df[  
                (~result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)) &   
                (result_df['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'].notna())  
            ])  
              
            col1.metric("–í—Å–µ–≥–æ", total)  
            col2.metric("‚úÖ –¢–æ—á–Ω—ã—Ö", exact)  
            col3.metric("‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏—Ö", similar)  
            col4.metric("üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤", duplicates)  
            col5.metric("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", not_found)  
            col6.metric("üì§ –ö –≤—ã–≥—Ä—É–∑–∫–µ", to_export)  
              
            if duplicates > 0:  
                st.warning(f"""  
                ‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:**  
                - üîÑ –ü–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é: **{dup_original}**  
                - üîÑ –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É HH: **{dup_hh}**  
                """)  
              
            st.markdown("---")  
            st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π")  
              
            st.text_input(  
                "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ",  
                key="search_query",
                placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...",  
                label_visibility="visible"  
            )  
              
            result_df['sort_priority'] = result_df.apply(  
                lambda row: 0 if row['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'] == 0 else (1 if row['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] == '–î–∞' else 2),  
                axis=1  
            )  
              
            result_df_sorted = result_df.sort_values(  
                by=['sort_priority', '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'],  
                ascending=[True, True]  
            ).reset_index(drop=True)  
              
            if st.session_state.search_query and st.session_state.search_query.strip():  
                search_lower = st.session_state.search_query.lower().strip()  
                mask = result_df_sorted.apply(  
                    lambda row: (  
                        search_lower in str(row['–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ']).lower() or  
                        search_lower in str(row['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']).lower() or  
                        search_lower in str(row['–†–µ–≥–∏–æ–Ω']).lower() or  
                        search_lower in str(row['–°—Ç–∞—Ç—É—Å']).lower()  
                    ),  
                    axis=1  
                )  
                result_df_filtered = result_df_sorted[mask]  
                  
                if len(result_df_filtered) == 0:  
                    st.warning(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É **'{st.session_state.search_query}'** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")  
                else:  
                    st.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: **{len(result_df_filtered)}** –∏–∑ {len(result_df_sorted)}")  
            else:  
                result_df_filtered = result_df_sorted  
              
            display_df = result_df_filtered.copy()  
            display_df = display_df.drop(['row_id', 'sort_priority'], axis=1, errors='ignore')  
              
            st.dataframe(display_df, use_container_width=True, height=400)  
              
            editable_rows = result_df_sorted[result_df_sorted['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'] <= 90].copy()  
              
            if len(editable_rows) > 0:  
                st.markdown("---")  
                st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ‚â§ 90%")  
                st.info(f"–ù–∞–π–¥–µ–Ω–æ **{len(editable_rows)}** –≥–æ—Ä–æ–¥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")  
                  
                for idx, row in editable_rows.iterrows():  
                    with st.container():  
                        col1, col2, col3, col4 = st.columns([2, 3, 1, 1])  
                          
                        with col1:  
                            st.markdown(f"**{row['–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ']}**")  
                          
                        with col2:  
                            row_id = row['row_id']  
                            candidates = st.session_state.candidates_cache.get(row_id, [])  
                              
                            if candidates:  
                                options = ["‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"] + [f"{c[0]} ({c[1]:.1f}%)" for c in candidates]  
                                  
                                current_value = row['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']  
                                  
                                if row_id in st.session_state.manual_selections:  
                                    selected_value = st.session_state.manual_selections[row_id]  
                                    if selected_value == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":  
                                        default_idx = 0  
                                    else:  
                                        default_idx = 0  
                                        for i, c in enumerate(candidates):  
                                            if c[0] == selected_value:  
                                                default_idx = i + 1  
                                                break  
                                else:  
                                    default_idx = 0  
                                    if current_value:  
                                        for i, c in enumerate(candidates):  
                                            if c[0] == current_value:  
                                                default_idx = i + 1  
                                                break  
                                  
                                selected = st.selectbox(  
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",  
                                    options=options,  
                                    index=default_idx,  
                                    key=f"select_{row_id}",  
                                    label_visibility="collapsed"  
                                )  
                                  
                                if selected == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":  
                                    st.session_state.manual_selections[row_id] = "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"  
                                else:  
                                    selected_city = selected.rsplit(' (', 1)[0]  
                                    st.session_state.manual_selections[row_id] = selected_city  
                            else:  
                                st.selectbox(  
                                    "–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",  
                                    options=["‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"],  
                                    index=0,  
                                    key=f"select_{row_id}",  
                                    label_visibility="collapsed",  
                                    disabled=True  
                                )  
                                st.session_state.manual_selections[row_id] = "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"  
                          
                        with col3:  
                            st.text(f"{row['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %']}%")  
                          
                        with col4:  
                            st.text(row['–°—Ç–∞—Ç—É—Å'])  
                          
                        st.markdown("<hr style='margin-top: 5px; margin-bottom: 5px;'>", unsafe_allow_html=True)  
                  
                if st.session_state.manual_selections:  
                    no_match_count = sum(1 for v in st.session_state.manual_selections.values() if v == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")  
                    changed_count = len(st.session_state.manual_selections) - no_match_count  
                      
                    st.success(f"‚úÖ –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changed_count} | ‚ùå –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è': {no_match_count}")  
              
            st.markdown("---")  
            st.subheader("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")  
              
            col1, col2, col3 = st.columns(3)  
              
            final_result_df = result_df.copy()  
            if st.session_state.manual_selections:  
                for row_id, new_value in st.session_state.manual_selections.items():  
                    mask = final_result_df['row_id'] == row_id  
                      
                    if new_value == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":  
                        final_result_df.loc[mask, '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'] = None  
                        final_result_df.loc[mask, 'ID HH'] = None  
                        final_result_df.loc[mask, '–†–µ–≥–∏–æ–Ω'] = None  
                        final_result_df.loc[mask, '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'] = 0  
                        final_result_df.loc[mask, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = '–ù–µ—Ç'  
                        final_result_df.loc[mask, '–°—Ç–∞—Ç—É—Å'] = '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'  
                    else:  
                        final_result_df.loc[mask, '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'] = new_value  
                          
                        if new_value in hh_areas:  
                            final_result_df.loc[mask, 'ID HH'] = hh_areas[new_value]['id']  
                            final_result_df.loc[mask, '–†–µ–≥–∏–æ–Ω'] = hh_areas[new_value]['parent']  
                          
                        original = final_result_df.loc[mask, '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'].values[0]  
                        final_result_df.loc[mask, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = '–î–∞' if check_if_changed(original, new_value) else '–ù–µ—Ç'  
              
            with col1:  
                if st.session_state.manual_selections:  
                    unique_manual_df = final_result_df[~final_result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)]  
                    publisher_manual_df = pd.DataFrame({'–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': unique_manual_df['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']})  
                    publisher_manual_df = publisher_manual_df.dropna()  
                      
                    output_manual = io.BytesIO()  
                    with pd.ExcelWriter(output_manual, engine='openpyxl') as writer:  
                        publisher_manual_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')  
                    output_manual.seek(0)  
                      
                    manual_count = len(publisher_manual_df)  
                    total_cities = len(result_df)  
                    percentage = (manual_count / total_cities * 100) if total_cities > 0 else 0  
                      
                    st.download_button(  
                        label=f"‚úèÔ∏è –° —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n{manual_count} ({percentage:.0f}%) –∏–∑ {total_cities}",  
                        data=output_manual,  
                        file_name=f"geo_manual_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",  
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",  
                        use_container_width=True,  
                        type="primary",  
                        key='download_manual'  
                    )  
                else:  
                    st.button(  
                        "‚úèÔ∏è –° —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏",   
                        use_container_width=True,   
                        disabled=True,   
                        help="–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"  
                    )  
              
            with col2:  
                output = io.BytesIO()  
                export_df = final_result_df.drop(['row_id', 'sort_priority'], axis=1, errors='ignore')  
                with pd.ExcelWriter(output, engine='openpyxl') as writer:  
                    export_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç')  
                output.seek(0)  
                  
                st.download_button(  
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",  
                    data=output,  
                    file_name=f"result_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",  
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",  
                    use_container_width=True,  
                    key='download_full'  
                )  
              
            with col3:  
                unique_df = final_result_df[~final_result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)]  
                publisher_df = pd.DataFrame({'–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': unique_df['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']})  
                publisher_df = publisher_df.dropna()  
                  
                output_publisher = io.BytesIO()  
                with pd.ExcelWriter(output_publisher, engine='openpyxl') as writer:  
                    publisher_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')  
                output_publisher.seek(0)  
                  
                unique_count = len(publisher_df)  
                  
                st.download_button(  
                    label=f"üì§ –§–∞–π–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ ({unique_count})",  
                    data=output_publisher,  
                    file_name=f"geo_for_publisher_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",  
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",  
                    use_container_width=True,  
                    key='download_publisher'  
                )  
      
    except Exception as e:  
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")  
        import traceback  
        st.code(traceback.format_exc())  

st.markdown("---")

# ============================================
# –ë–õ–û–ö: –í–´–ë–û–† –†–ï–ì–ò–û–ù–û–í
# ============================================
st.header("üó∫Ô∏è –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤")
st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞ –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤")

if hh_areas is not None:
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞")
        selected_districts = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞:",
            options=list(FEDERAL_DISTRICTS.keys()),
            help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–∫—Ä—É–≥–æ–≤",
            key="districts_select"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤
    available_regions = []
    if selected_districts:
        for district in selected_districts:
            available_regions.extend(FEDERAL_DISTRICTS[district])
    else:
        # –ï—Å–ª–∏ –æ–∫—Ä—É–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
        for regions in FEDERAL_DISTRICTS.values():
            available_regions.extend(regions)
    
    with col2:
        st.subheader("–û–±–ª–∞—Å—Ç–∏/–†–µ–≥–∏–æ–Ω—ã")
        selected_regions = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç–∏/—Ä–µ–≥–∏–æ–Ω—ã:",
            options=sorted(available_regions),
            help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤",
            key="regions_select"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
    regions_to_search = []
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if selected_regions:
        regions_to_search = selected_regions
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –æ–∫—Ä—É–≥–∞ (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤), –±–µ—Ä–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ —ç—Ç–∏—Ö –æ–∫—Ä—É–≥–æ–≤
    elif selected_districts:
        for district in selected_districts:
            regions_to_search.extend(FEDERAL_DISTRICTS[district])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    col_btn1, col_btn2 = st.columns(2)
    
    with col_btn1:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
        if regions_to_search:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ
            if selected_regions:
                st.info(f"üìç –í—ã–±—Ä–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: **{len(selected_regions)}**")
            elif selected_districts:
                st.info(f"üìç –í—ã–±—Ä–∞–Ω–æ –æ–∫—Ä—É–≥–æ–≤: **{len(selected_districts)}** (–≤–∫–ª—é—á–∞–µ—Ç {len(regions_to_search)} —Ä–µ–≥–∏–æ–Ω–æ–≤)")
            
            if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", type="primary", use_container_width=True):
                with st.spinner("–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤..."):
                    cities_df = get_cities_by_regions(hh_areas, regions_to_search)
                    
                    if not cities_df.empty:
                        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ **{len(cities_df)}** –≥–æ—Ä–æ–¥–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                        st.dataframe(cities_df, use_container_width=True, height=400)
                        
                        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                            output_full = io.BytesIO()
                            with pd.ExcelWriter(output_full, engine='openpyxl') as writer:
                                cities_df.to_excel(writer, index=False, sheet_name='–ì–æ—Ä–æ–¥–∞')
                            output_full.seek(0)
                            
                            st.download_button(
                                label=f"üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç ({len(cities_df)} –≥–æ—Ä–æ–¥–æ–≤)",
                                data=output_full,
                                file_name="cities_full_report.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True,
                                key="download_regions_full"
                            )
                        
                        with col2:
                            # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞
                            publisher_df = pd.DataFrame({'–ì–æ—Ä–æ–¥': cities_df['–ì–æ—Ä–æ–¥']})
                            output_publisher = io.BytesIO()
                            with pd.ExcelWriter(output_publisher, engine='openpyxl') as writer:
                                publisher_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')
                            output_publisher.seek(0)
                            
                            st.download_button(
                                label=f"üì§ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ ({len(cities_df)} –≥–æ—Ä–æ–¥–æ–≤)",
                                data=output_publisher,
                                file_name="cities_for_publisher.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True,
                                key="download_regions_publisher"
                            )
                    else:
                        st.warning("‚ö†Ô∏è –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö")
        else:
            st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤")
    
    with col_btn2:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
        if st.button("üåç –í—ã–≥—Ä—É–∑–∏—Ç—å –í–°–ï –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞", type="secondary", use_container_width=True):
            with st.spinner("–§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤..."):
                all_cities_df = get_all_cities(hh_areas)
                
                if not all_cities_df.empty:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ **{len(all_cities_df)}** –≥–æ—Ä–æ–¥–æ–≤ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ HH.ru")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    st.dataframe(all_cities_df, use_container_width=True, height=400)
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                        output_all_full = io.BytesIO()
                        with pd.ExcelWriter(output_all_full, engine='openpyxl') as writer:
                            all_cities_df.to_excel(writer, index=False, sheet_name='–ì–æ—Ä–æ–¥–∞')
                        output_all_full.seek(0)
                        
                        st.download_button(
                            label=f"üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç ({len(all_cities_df)} –≥–æ—Ä–æ–¥–æ–≤)",
                            data=output_all_full,
                            file_name="all_cities_full_report.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True,
                            key="download_all_full"
                        )
                    
                    with col2:
                        # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞
                        publisher_all_df = pd.DataFrame({'–ì–æ—Ä–æ–¥': all_cities_df['–ì–æ—Ä–æ–¥']})
                        output_all_publisher = io.BytesIO()
                        with pd.ExcelWriter(output_all_publisher, engine='openpyxl') as writer:
                            publisher_all_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')
                        output_all_publisher.seek(0)
                        
                        st.download_button(
                            label=f"üì§ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ ({len(all_cities_df)} –≥–æ—Ä–æ–¥–æ–≤)",
                            data=output_all_publisher,
                            file_name="all_cities_for_publisher.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True,
                            key="download_all_publisher"
                        )
                else:
                    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤")

st.markdown("---")  
st.markdown(  
    "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è | –î–∞–Ω–Ω—ã–µ –∏–∑ API HH.ru",  
    unsafe_allow_html=True  
)

