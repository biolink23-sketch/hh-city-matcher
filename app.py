import streamlit as st
import requests
import pandas as pd
from rapidfuzz import fuzz, process
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–µ–æ HH.ru",
    page_icon="üåç",
    layout="wide"
)

# CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–µ–º–ª–∏ –∏ —Å—Ç–∏–ª–µ–π
st.markdown("""
<style>
@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.rotating-earth {
    display: inline-block;
    animation: rotate 3s linear infinite;
    font-size: 3em;
    vertical-align: middle;
    margin-right: 15px;
}

.main-title {
    display: inline-block;
    font-size: 3em;
    font-weight: bold;
    vertical-align: middle;
    margin: 0;
}

.title-container {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'result_df' not in st.session_state:
    st.session_state.result_df = None
if 'duplicate_count' not in st.session_state:
    st.session_state.duplicate_count = 0
if 'processed' not in st.session_state:
    st.session_state.processed = False
if 'manual_selections' not in st.session_state:
    st.session_state.manual_selections = {}
if 'candidates_cache' not in st.session_state:
    st.session_state.candidates_cache = {}
if 'search_query' not in st.session_state:
    st.session_state.search_query = ""
# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–∞–º–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
if 'search_input_widget' not in st.session_state:
    st.session_state.search_input_widget = ""

# ============================================
# –§–£–ù–ö–¶–ò–ò
# ============================================
@st.cache_data(ttl=3600)
def get_hh_areas():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH.ru"""
    response = requests.get('https://api.hh.ru/areas')
    data = response.json()
    
    areas_dict = {}
    
    def parse_areas(areas, parent_name=""):
        for area in areas:
            area_id = area['id']
            area_name = area['name']
            
            areas_dict[area_name] = {
                'id': area_id,
                'name': area_name,
                'parent': parent_name
            }
            
            if area.get('areas'):
                parse_areas(area['areas'], area_name)
    
    parse_areas(data)
    return areas_dict

def normalize_region_name(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.lower()
    replacements = {
        '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è': '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥',
        '–º–æ—Å–∫–æ–≤—Å–∫–∞—è': '–º–æ—Å–∫–æ–≤',
        '–∫—É—Ä—Å–∫–∞—è': '–∫—É—Ä—Å–∫',
        '–∫–µ–º–µ—Ä–æ–≤—Å–∫–∞—è': '–∫–µ–º–µ—Ä–æ–≤',
        '—Å–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è': '—Å–≤–µ—Ä–¥–ª–æ–≤',
        '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è': '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥',
        '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è': '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        '—Ç–∞–º–±–æ–≤—Å–∫–∞—è': '—Ç–∞–º–±–æ–≤',
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞—è': '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
        '–æ–±–ª–∞—Å—Ç—å': '',
        '–æ–±–ª': '',
        '–∫—Ä–∞–π': '',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '',
        '—Ä–µ—Å–ø': '',
        '  ': ' '
    }
    for old, new in replacements.items():
        text = text.replace(old, new)
    return text.strip()

def extract_city_and_region(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()
    
    region_keywords = [
        '–æ–±–ª–∞—Å—Ç', '–∫—Ä–∞–π', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–æ–∫—Ä—É–≥',
        '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥', '–º–æ—Å–∫–æ–≤', '–∫—É—Ä—Å–∫', '–∫–µ–º–µ—Ä–æ–≤',
        '—Å–≤–µ—Ä–¥–ª–æ–≤', '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '—Ç–∞–º–±–æ–≤',
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
    ]
    
    words = text.split()
    
    if len(words) == 1:
        return text, None
    
    city_words = []
    region_words = []
    region_found = False
    
    for word in words:
        word_lower = word.lower()
        if not region_found and any(keyword in word_lower for keyword in region_keywords):
            region_found = True
            region_words.append(word)
        elif region_found:
            region_words.append(word)
        else:
            city_words.append(word)
    
    city = ' '.join(city_words) if city_words else text
    region = ' '.join(region_words) if region_words else None
    
    return city, region

def check_if_changed(original, matched):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    if matched is None or matched == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":
        return False
    
    original_clean = original.strip()
    matched_clean = matched.strip()
    
    return original_clean != matched_clean

def get_candidates_by_word(client_city, hh_city_names, limit=20):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≥–æ—Ä–æ–¥–∞
    first_word = client_city.split()[0].lower().strip()
    
    # –ò—â–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ —Å–ª–æ–≤–æ
    candidates = []
    for city_name in hh_city_names:
        city_lower = city_name.lower()
        if first_word in city_lower:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            score = fuzz.WRatio(client_city.lower(), city_lower)
            candidates.append((city_name, score))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    candidates.sort(key=lambda x: x[1], reverse=True)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    return candidates[:limit]

def smart_match_city(client_city, hh_city_names, hh_areas, threshold=85):
    """–£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    
    city_part, region_part = extract_city_and_region(client_city)
    city_part_lower = city_part.lower().strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å–ª–æ–≤–∞
    word_candidates = get_candidates_by_word(client_city, hh_city_names)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ —Å–ª–æ–≤—É —Å —Ö–æ—Ä–æ—à–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º (>= 85%), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π
    if word_candidates and len(word_candidates) > 0 and word_candidates[0][1] >= threshold:
        best_candidate = word_candidates[0]
        return (best_candidate[0], best_candidate[1], 0), word_candidates
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å–ª–æ–≤—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
    if not word_candidates or (word_candidates and word_candidates[0][1] < threshold):
        return None, word_candidates
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    exact_matches = []
    exact_matches_with_region = []
    
    for hh_city_name in hh_city_names:
        hh_city_base = hh_city_name.split('(')[0].strip().lower()
        
        if city_part_lower == hh_city_base:
            if region_part:
                region_normalized = normalize_region_name(region_part)
                hh_normalized = normalize_region_name(hh_city_name)
                
                if region_normalized in hh_normalized:
                    exact_matches_with_region.append(hh_city_name)
                else:
                    exact_matches.append(hh_city_name)
            else:
                exact_matches.append(hh_city_name)
    
    if exact_matches_with_region:
        best_match = exact_matches_with_region[0]
        score = fuzz.WRatio(client_city.lower(), best_match.lower())
        return (best_match, score, 0), word_candidates
    elif exact_matches:
        best_match = exact_matches[0]
        score = fuzz.WRatio(client_city.lower(), best_match.lower())
        return (best_match, score, 0), word_candidates
    
    candidates = process.extract(
        client_city,
        hh_city_names,
        scorer=fuzz.WRatio,
        limit=10
    )
    
    if not candidates:
        return None, word_candidates
    
    candidates = [c for c in candidates if c[1] >= threshold]
    
    if not candidates:
        return None, word_candidates
    
    if len(candidates) == 1:
        return candidates[0], word_candidates
    
    best_match = None
    best_score = 0
    
    client_city_lower = client_city.lower()
    
    for candidate_name, score, _ in candidates:
        candidate_lower = candidate_name.lower()
        adjusted_score = score
        
        candidate_city = candidate_name.split('(')[0].strip().lower()
        
        if city_part_lower == candidate_city:
            adjusted_score += 50
        elif city_part_lower in candidate_city:
            adjusted_score += 30
        elif candidate_city in city_part_lower:
            adjusted_score += 20
        else:
            adjusted_score -= 30
        
        if region_part:
            region_normalized = normalize_region_name(region_part)
            candidate_normalized = normalize_region_name(candidate_name)
            
            if region_normalized in candidate_normalized:
                adjusted_score += 40
            elif '(' in candidate_name:
                adjusted_score -= 25
        
        len_diff = abs(len(candidate_city) - len(city_part_lower))
        if len_diff > 3:
            adjusted_score -= 20
        
        if len(candidate_city) > len(city_part_lower) + 4:
            adjusted_score -= 25
        
        if len(candidate_name) > 15 and len(client_city) > 15:
            adjusted_score += 5
        
        region_keywords = ['–æ–±–ª–∞—Å—Ç', '–∫—Ä–∞–π', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–æ–∫—Ä—É–≥']
        client_has_region = any(keyword in client_city_lower for keyword in region_keywords)
        candidate_has_region = any(keyword in candidate_lower for keyword in region_keywords)
        
        if client_has_region and candidate_has_region:
            adjusted_score += 15
        elif client_has_region and not candidate_has_region:
            adjusted_score -= 15
        
        if adjusted_score > best_score:
            best_score = adjusted_score
            best_match = (candidate_name, score, _)
    
    return (best_match if best_match else candidates[0]), word_candidates

def match_cities(client_cities, hh_areas, threshold=85):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    results = []
    hh_city_names = list(hh_areas.keys())
    
    seen_original_cities = {}
    seen_hh_cities = {}
    
    duplicate_original_count = 0
    duplicate_hh_count = 0
    
    st.session_state.candidates_cache = {}
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for idx, client_city in enumerate(client_cities):
        progress = (idx + 1) / len(client_cities)
        progress_bar.progress(progress)
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx + 1} –∏–∑ {len(client_cities)} –≥–æ—Ä–æ–¥–æ–≤...")
        
        if pd.isna(client_city) or str(client_city).strip() == "":
            results.append({
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city,
                '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': None,
                'ID HH': None,
                '–†–µ–≥–∏–æ–Ω': None,
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': '–ù–µ—Ç',
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                'row_id': idx
            })
            continue
        
        client_city_original = str(client_city).strip()
        client_city_normalized = client_city_original.lower().strip()
        
        if client_city_normalized in seen_original_cities:
            duplicate_original_count += 1
            original_result = seen_original_cities[client_city_normalized]
            results.append({
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': original_result['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'],
                'ID HH': original_result['ID HH'],
                '–†–µ–≥–∏–æ–Ω': original_result['–†–µ–≥–∏–æ–Ω'],
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': original_result['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'],
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': original_result['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'],
                '–°—Ç–∞—Ç—É—Å': 'üîÑ –î—É–±–ª–∏–∫–∞—Ç (–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)',
                'row_id': idx
            })
            continue
        
        match_result, candidates = smart_match_city(client_city_original, hh_city_names, hh_areas, threshold)
        
        st.session_state.candidates_cache[idx] = candidates
        
        if match_result:
            matched_name = match_result[0]
            score = match_result[1]
            hh_info = hh_areas[matched_name]
            hh_city_normalized = hh_info['name'].lower().strip()
            
            is_changed = check_if_changed(client_city_original, hh_info['name'])
            change_status = '–î–∞' if is_changed else '–ù–µ—Ç'
            
            if hh_city_normalized in seen_hh_cities:
                duplicate_hh_count += 1
                city_result = {
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                    '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': hh_info['name'],
                    'ID HH': hh_info['id'],
                    '–†–µ–≥–∏–æ–Ω': hh_info['parent'],
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': round(score, 1),
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': change_status,
                    '–°—Ç–∞—Ç—É—Å': 'üîÑ –î—É–±–ª–∏–∫–∞—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç HH)',
                    'row_id': idx
                }
                results.append(city_result)
                seen_original_cities[client_city_normalized] = city_result
            else:
                status = '‚úÖ –¢–æ—á–Ω–æ–µ' if score >= 95 else '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ'
                
                city_result = {
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                    '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': hh_info['name'],
                    'ID HH': hh_info['id'],
                    '–†–µ–≥–∏–æ–Ω': hh_info['parent'],
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': round(score, 1),
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': change_status,
                    '–°—Ç–∞—Ç—É—Å': status,
                    'row_id': idx
                }
                
                results.append(city_result)
                seen_original_cities[client_city_normalized] = city_result
                seen_hh_cities[hh_city_normalized] = True
        else:
            city_result = {
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': None,
                'ID HH': None,
                '–†–µ–≥–∏–æ–Ω': None,
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': '–ù–µ—Ç',
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                'row_id': idx
            }
            
            results.append(city_result)
            seen_original_cities[client_city_normalized] = city_result
    
    progress_bar.empty()
    status_text.empty()
    
    total_duplicates = duplicate_original_count + duplicate_hh_count
    
    return pd.DataFrame(results), duplicate_original_count, duplicate_hh_count, total_duplicates

# ============================================
# –ò–ù–¢–ï–†–§–ï–ô–°
# ============================================
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–µ–º–ª–µ–π
st.markdown(
    '<div class="title-container">'
    '<span class="rotating-earth">üåç</span>'
    '<span class="main-title">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–µ–æ HH.ru</span>'
    '</div>',
    unsafe_allow_html=True
)
st.markdown("---")

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    threshold = st.slider(
        "–ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (%)",
        min_value=50,
        max_value=100,
        value=85,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
    )
    
    st.markdown("---")
    
    # –ë–ê–ó–û–í–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò
    st.markdown("### üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.markdown("""
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
    
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** Excel –∏–ª–∏ CSV —Å –≥–æ—Ä–æ–¥–∞–º–∏
    2. –ì–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ **–ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ**
    3. –ù–∞–∂–º–∏—Ç–µ **"üöÄ –ù–∞—á–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"**
    4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
    5. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ä–æ–¥–∞ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ‚â§ 90%
    6. –°–∫–∞—á–∞–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    
    **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:**
    - –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    - –û–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫—É
    - –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–ª–∞—Å—Ç—å/—Ä–µ–≥–∏–æ–Ω
    """)
    
    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç—É—Å—ã")
    st.markdown("""
    - ‚úÖ **–¢–æ—á–Ω–æ–µ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â•95%
    - ‚ö†Ô∏è **–ü–æ—Ö–æ–∂–µ–µ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â•–ø–æ—Ä–æ–≥–∞
    - üîÑ **–î—É–±–ª–∏–∫–∞—Ç** - –ø–æ–≤—Ç–æ—Ä—ã
    - ‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ <–ø–æ—Ä–æ–≥–∞
    """)
    
    st.markdown("---")
    
    # –ü–û–õ–ù–ê–Ø –°–ü–†–ê–í–ö–ê
    with st.expander("üìö –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", expanded=False):
        st.markdown("""
        ### –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–∏—Å?
        
        **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–µ–æ HH.ru** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ 
        —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º HeadHunter –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π.
        
        ---
        
        ### –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?
        
        #### 1Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
        - –ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ **–ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É** –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –æ–±–ª–∞—Å—Ç—å/—Ä–µ–≥–∏–æ–Ω, –ø–æ—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        - **–ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è 85%** - –µ—Å–ª–∏ –Ω–∏–∂–µ, –≥–æ—Ä–æ–¥ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        **–ü—Ä–∏–º–µ—Ä:** –¥–ª—è –≥–æ—Ä–æ–¥–∞ "–ö–∏—Ä–æ–≤—Å–∫" –Ω–∞–π–¥–µ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–∫–∏—Ä–æ–≤—Å–∫":
        - –ö–∏—Ä–æ–≤—Å–∫ (–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
        - –ö–∏—Ä–æ–≤—Å–∫ (–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
        - –ò —Ç.–¥.
        
        #### 2Ô∏è‚É£ –¢–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        - **‚úÖ –¢–æ—á–Ω–æ–µ** (‚â•95%) - –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        - **‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ** (‚â•85%) - –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        - **‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ** (<85%) - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
        - **üîÑ –î—É–±–ª–∏–∫–∞—Ç** - –≥–æ—Ä–æ–¥ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ
        
        #### 3Ô∏è‚É£ –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        –î–ª—è –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º **‚â§ 90%** –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
        - –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        - –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –≥–æ—Ä–æ–¥–∞
        - –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç - –≤—ã–±–µ—Ä–∏—Ç–µ **"‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"**
        - –ì–æ—Ä–æ–¥–∞ —Å "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è" **–Ω–µ –ø–æ–ø–∞–¥—É—Ç** –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
        
        ---
        
        ### –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        
        #### –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        –°–æ–∑–¥–∞–π—Ç–µ Excel (.xlsx) –∏–ª–∏ CSV —Ñ–∞–π–ª:
        - –ì–æ—Ä–æ–¥–∞ –≤ **–ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ**
        - **–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤** (–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –≥–æ—Ä–æ–¥)
        - –û–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫—É
        
        **–ü—Ä–∏–º–µ—Ä:**
        ```
        –ú–æ—Å–∫–≤–∞
        –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
        –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
        –ö–∏—Ä–æ–≤—Å–∫ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        ```
        
        #### –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞
        1. –ù–∞–∂–º–∏—Ç–µ **"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏"**
        2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV
        3. –ù–∞–∂–º–∏—Ç–µ **"üöÄ –ù–∞—á–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"**
        4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        #### –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        –ò–∑—É—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:
        - **–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ** - –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞
        - **–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ** - –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ HH
        - **ID HH** - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞
        - **–†–µ–≥–∏–æ–Ω** - –æ–±–ª–∞—Å—Ç—å/–∫—Ä–∞–π/—Ä–µ—Å–ø—É–±–ª–∏–∫–∞
        - **–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %** - –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        - **–°—Ç–∞—Ç—É—Å** - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–ø–æ–∏—Å–∫** –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.
        
        #### –®–∞–≥ 4: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ‚â§ 90%:
        1. –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –¥–æ —Ä–∞–∑–¥–µ–ª–∞ **"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤"**
        2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        3. –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤—ã–±–µ—Ä–∏—Ç–µ **"‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"**
        
        #### –®–∞–≥ 5: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        **‚úèÔ∏è –° —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏** (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        - –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ –ø—Ä–∞–≤–∫–∏
        - –ì–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä
        - –§–æ—Ä–º–∞—Ç: –æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        - **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –≤–Ω–æ—Å–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è**
        
        **üì• –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç**
        - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        - –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∞—Ä—Ö–∏–≤–∞
        
        **üì§ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞**
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Ä—É—á–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫
        - –ì–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä
        
        ---
        
        ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
        
        #### ‚úÖ –ß—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–µ–ª–∞–µ—Ç —Ö–æ—Ä–æ—à–æ:
        - –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è (–ü–∏—Ç–µ—Ä ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å/—Ä–µ–≥–∏–æ–Ω
        - –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        - –ù–∞—Ö–æ–¥–∏—Ç –≥–æ—Ä–æ–¥–∞ –¥–∞–∂–µ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏
        - **–ò—â–µ—Ç –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É** - –¥–ª—è "–ö–∏—Ä–æ–≤—Å–∫" –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        
        #### ‚ö†Ô∏è –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
        - –ì–æ—Ä–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ (–°–ü–±, –ú—Å–∫)
        - –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        - –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â§ 90%
        
        #### ‚ùå –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω:
        1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å/—Ä–µ–≥–∏–æ–Ω
        3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        4. –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ HH - –≤—ã–±–µ—Ä–∏—Ç–µ "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
        
        ---
        
        ### –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        
        **Q: –ü–æ—á–µ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã?**  
        A: –í–æ–∑–º–æ–∂–Ω–æ, –≥–æ—Ä–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω —Å –æ—à–∏–±–∫–æ–π, —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º, –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ HH.ru. 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
        
        **Q: –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç "–î—É–±–ª–∏–∫–∞—Ç"?**  
        A: –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ. –î—É–±–ª–∏–∫–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
        –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        **Q: –ù—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º?**  
        A: –ì–æ—Ä–æ–¥–∞ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º >90% –æ–±—ã—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 
        –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.
        
        **Q: –ö–∞–∫–æ–π —Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞?**  
        A: –ï—Å–ª–∏ –≤–Ω–æ—Å–∏–ª–∏ —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Å–∫–∞—á–∏–≤–∞–π—Ç–µ **"–° —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"**. 
        –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **"–î–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞"**.
        
        **Q: –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏?**  
        A: –î–∞, –Ω–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ –≥–æ—Ä–æ–¥. –õ—É—á—à–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å 
        —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
        
        **Q: –ü–æ—á–µ–º—É –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥, –∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–æ–π?**  
        A: –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è < 85%, –≥–æ—Ä–æ–¥ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ "–ù–µ –Ω–∞–π–¥–µ–Ω–æ". 
        –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
        
        **Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ?**  
        A: –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - —Ç–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è. 
        –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–µ–≥–∏–æ–Ω, —Å—Ç–∞—Ç—É—Å).
        
        ---
        
        ### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
        
        - **–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫**: –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API HH.ru
        - **–ê–ª–≥–æ—Ä–∏—Ç–º**: –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É + –Ω–µ—á–µ—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        - **–ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è**: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 85% (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
        - **–§–æ—Ä–º–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏**: Excel (.xlsx), –æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        - **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
        - **–ü–æ–∏—Å–∫**: –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞
        """)

col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏",
        type=['xlsx', 'csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx) –∏ CSV"
    )
    
    with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"):
        example_df = pd.DataFrame({
            '': ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫']
        })
        st.dataframe(example_df, use_container_width=True, hide_index=True)

with col2:
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    try:
        hh_areas = get_hh_areas()
        st.success(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH –∑–∞–≥—Ä—É–∂–µ–Ω: **{len(hh_areas)}** –≥–æ—Ä–æ–¥–æ–≤")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {str(e)}")
        hh_areas = None

if uploaded_file is not None and hh_areas is not None:
    st.markdown("---")
    
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file, header=None)
        else:
            df = pd.read_excel(uploaded_file, header=None)
        
        client_cities = df.iloc[:, 0].tolist()
        st.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ **{len(client_cities)}** –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", type="primary", use_container_width=True):
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."):
                result_df, dup_original, dup_hh, total_dup = match_cities(client_cities, hh_areas, threshold)
                st.session_state.result_df = result_df
                st.session_state.dup_original = dup_original
                st.session_state.dup_hh = dup_hh
                st.session_state.total_dup = total_dup
                st.session_state.processed = True
                st.session_state.manual_selections = {}
                st.session_state.search_query = ""
                st.session_state.search_input_widget = "" # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –≤–∏–¥–∂–µ—Ç
        
        if st.session_state.processed and st.session_state.result_df is not None:
            result_df = st.session_state.result_df.copy()
            dup_original = st.session_state.dup_original
            dup_hh = st.session_state.dup_hh
            total_dup = st.session_state.total_dup
            
            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            
            total = len(result_df)
            exact = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚úÖ –¢–æ—á–Ω–æ–µ'])
            similar = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ'])
            duplicates = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)])
            not_found = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'])
            
            # –ü–æ–¥—Å—á–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –∫ –≤—ã–≥—Ä—É–∑–∫–µ (–≤—Å–µ –∫—Ä–æ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            to_export = len(result_df[
                (~result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)) & 
                (result_df['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'].notna())
            ])
            
            col1.metric("–í—Å–µ–≥–æ", total)
            col2.metric("‚úÖ –¢–æ—á–Ω—ã—Ö", exact)
            col3.metric("‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏—Ö", similar)
            col4.metric("üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤", duplicates)
            col5.metric("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", not_found)
            col6.metric("üì§ –ö –≤—ã–≥—Ä—É–∑–∫–µ", to_export)
            
            if duplicates > 0:
                st.warning(f"""
                ‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:**
                - üîÑ –ü–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é: **{dup_original}**
                - üîÑ –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É HH: **{dup_hh}**
                """)
            
            st.markdown("---")
            st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
            
            # ==========================================================
            # –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö –ü–û–ò–°–ö–ê
            # ==========================================================
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback on_change –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
            # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞ —Ç–∞–±–ª–∏—Ü—É.
            def on_search_change():
                st.session_state.search_query = st.session_state.search_input_widget
            
            st.text_input(
                "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ",
                key="search_input_widget",
                on_change=on_search_change,
                placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...",
                label_visibility="visible"
            )
            # ==========================================================
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            result_df['sort_priority'] = result_df.apply(
                lambda row: 0 if row['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'] == 0 else (1 if row['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] == '–î–∞' else 2),
                axis=1
            )
            
            result_df_sorted = result_df.sort_values(
                by=['sort_priority', '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'],
                ascending=[True, True]
            ).reset_index(drop=True)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if st.session_state.search_query and st.session_state.search_query.strip():
                search_lower = st.session_state.search_query.lower().strip()
                mask = result_df_sorted.apply(
                    lambda row: (
                        search_lower in str(row['–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ']).lower() or
                        search_lower in str(row['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']).lower() or
                        search_lower in str(row['–†–µ–≥–∏–æ–Ω']).lower() or
                        search_lower in str(row['–°—Ç–∞—Ç—É—Å']).lower()
                    ),
                    axis=1
                )
                result_df_filtered = result_df_sorted[mask]
                
                if len(result_df_filtered) == 0:
                    st.warning(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É **'{st.session_state.search_query}'** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    st.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: **{len(result_df_filtered)}** –∏–∑ {len(result_df_sorted)}")
            else:
                result_df_filtered = result_df_sorted
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            display_df = result_df_filtered.copy()
            display_df = display_df.drop(['row_id', 'sort_priority'], axis=1, errors='ignore')
            
            st.dataframe(display_df, use_container_width=True, height=400)
            
            # –†–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º <= 90%
            editable_rows = result_df_sorted[result_df_sorted['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'] <= 90].copy()
            
            if len(editable_rows) > 0:
                st.markdown("---")
                st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ‚â§ 90%")
                st.info(f"–ù–∞–π–¥–µ–Ω–æ **{len(editable_rows)}** –≥–æ—Ä–æ–¥–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                for idx, row in editable_rows.iterrows():
                    with st.container():
                        col1, col2, col3, col4 = st.columns([2, 3, 1, 1])
                        
                        with col1:
                            st.markdown(f"**{row['–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ']}**")
                        
                        with col2:
                            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                            row_id = row['row_id']
                            candidates = st.session_state.candidates_cache.get(row_id, [])
                            
                            if candidates:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π —Å –æ–ø—Ü–∏–µ–π "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                                options = ["‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"] + [f"{c[0]} ({c[1]:.1f}%)" for c in candidates]
                                
                                # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                current_value = row['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']
                                
                                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                                if row_id in st.session_state.manual_selections:
                                    selected_value = st.session_state.manual_selections[row_id]
                                    if selected_value == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":
                                        default_idx = 0
                                    else:
                                        # –ò—â–µ–º –≤ —Å–ø–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                                        default_idx = 0
                                        for i, c in enumerate(candidates):
                                            if c[0] == selected_value:
                                                default_idx = i + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                                                break
                                else:
                                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                                    default_idx = 0
                                    if current_value:
                                        for i, c in enumerate(candidates):
                                            if c[0] == current_value:
                                                default_idx = i + 1
                                                break
                                
                                # Selectbox –¥–ª—è –≤—ã–±–æ—Ä–∞
                                selected = st.selectbox(
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                                    options=options,
                                    index=default_idx,
                                    key=f"select_{row_id}",
                                    label_visibility="collapsed"
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
                                if selected == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":
                                    st.session_state.manual_selections[row_id] = "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                                else:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                                    selected_city = selected.rsplit(' (', 1)[0]
                                    st.session_state.manual_selections[row_id] = selected_city
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—é "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                                st.selectbox(
                                    "–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                                    options=["‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"],
                                    index=0,
                                    key=f"select_{row_id}",
                                    label_visibility="collapsed",
                                    disabled=True
                                )
                                st.session_state.manual_selections[row_id] = "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                        
                        with col3:
                            st.text(f"{row['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %']}%")
                        
                        with col4:
                            st.text(row['–°—Ç–∞—Ç—É—Å'])
                        
                        st.markdown("<hr style='margin-top: 5px; margin-bottom: 5px;'>", unsafe_allow_html=True)
                
                if st.session_state.manual_selections:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                    no_match_count = sum(1 for v in st.session_state.manual_selections.values() if v == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
                    changed_count = len(st.session_state.manual_selections) - no_match_count
                    
                    st.success(f"‚úÖ –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changed_count} | ‚ùå –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è': {no_match_count}")
            
            st.markdown("---")
            st.subheader("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            col1, col2, col3 = st.columns(3)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            final_result_df = result_df.copy()
            if st.session_state.manual_selections:
                for row_id, new_value in st.session_state.manual_selections.items():
                    mask = final_result_df['row_id'] == row_id
                    
                    if new_value == "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è":
                        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
                        final_result_df.loc[mask, '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'] = None
                        final_result_df.loc[mask, 'ID HH'] = None
                        final_result_df.loc[mask, '–†–µ–≥–∏–æ–Ω'] = None
                        final_result_df.loc[mask, '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'] = 0
                        final_result_df.loc[mask, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = '–ù–µ—Ç'
                        final_result_df.loc[mask, '–°—Ç–∞—Ç—É—Å'] = '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
                    else:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
                        final_result_df.loc[mask, '–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ'] = new_value
                        
                        if new_value in hh_areas:
                            final_result_df.loc[mask, 'ID HH'] = hh_areas[new_value]['id']
                            final_result_df.loc[mask, '–†–µ–≥–∏–æ–Ω'] = hh_areas[new_value]['parent']
                        
                        original = final_result_df.loc[mask, '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'].values[0]
                        final_result_df.loc[mask, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] = '–î–∞' if check_if_changed(original, new_value) else '–ù–µ—Ç'
            
            # –§–∞–π–ª —Å —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (–ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞)
            with col1:
                if st.session_state.manual_selections:
                    unique_manual_df = final_result_df[~final_result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)]
                    publisher_manual_df = pd.DataFrame({'–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': unique_manual_df['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']})
                    publisher_manual_df = publisher_manual_df.dropna()
                    
                    output_manual = io.BytesIO()
                    with pd.ExcelWriter(output_manual, engine='openpyxl') as writer:
                        publisher_manual_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')
                    output_manual.seek(0)
                    
                    manual_count = len(publisher_manual_df)
                    total_cities = len(result_df)
                    percentage = (manual_count / total_cities * 100) if total_cities > 0 else 0
                    
                    st.download_button(
                        label=f"‚úèÔ∏è –° —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n{manual_count} ({percentage:.0f}%) –∏–∑ {total_cities}",
                        data=output_manual,
                        file_name=f"geo_manual_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True,
                        type="primary",
                        key='download_manual'
                    )
                else:
                    st.button(
                        "‚úèÔ∏è –° —Ä—É—á–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏", 
                        use_container_width=True, 
                        disabled=True, 
                        help="–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"
                    )
            
            # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            with col2:
                output = io.BytesIO()
                export_df = final_result_df.drop(['row_id', 'sort_priority'], axis=1, errors='ignore')
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    export_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç')
                output.seek(0)
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
                    data=output,
                    file_name=f"result_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                    key='download_full'
                )
            
            # –§–∞–π–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ (–æ–±—ã—á–Ω—ã–π)
            with col3:
                unique_df = final_result_df[~final_result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)]
                # –£–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                publisher_df = pd.DataFrame({'–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ': unique_df['–ò—Ç–æ–≥–æ–≤–æ–µ –≥–µ–æ']})
                publisher_df = publisher_df.dropna()
                
                output_publisher = io.BytesIO()
                with pd.ExcelWriter(output_publisher, engine='openpyxl') as writer:
                    publisher_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')
                output_publisher.seek(0)
                
                unique_count = len(publisher_df)
                
                st.download_button(
                    label=f"üì§ –§–∞–π–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ ({unique_count})",
                    data=output_publisher,
                    file_name=f"geo_for_publisher_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                    key='download_publisher'
                )
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        st.code(traceback.format_exc())

st.markdown("---")
st.markdown(
    "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è | –î–∞–Ω–Ω—ã–µ –∏–∑ API HH.ru",
    unsafe_allow_html=True
)
