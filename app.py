import streamlit as st
import requests
import pandas as pd
from rapidfuzz import fuzz, process
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å HH.ru",
    page_icon="üåç",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'result_df' not in st.session_state:
    st.session_state.result_df = None
if 'duplicate_count' not in st.session_state:
    st.session_state.duplicate_count = 0
if 'processed' not in st.session_state:
    st.session_state.processed = False

# ============================================
# –§–£–ù–ö–¶–ò–ò
# ============================================
@st.cache_data(ttl=3600)
def get_hh_areas():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH.ru"""
    response = requests.get('https://api.hh.ru/areas')
    data = response.json()
    
    areas_dict = {}
    
    def parse_areas(areas, parent_name=""):
        for area in areas:
            area_id = area['id']
            area_name = area['name']
            
            areas_dict[area_name] = {
                'id': area_id,
                'name': area_name,
                'parent': parent_name
            }
            
            if area.get('areas'):
                parse_areas(area['areas'], area_name)
    
    parse_areas(data)
    return areas_dict

def normalize_region_name(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.lower()
    replacements = {
        '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è': '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥',
        '–º–æ—Å–∫–æ–≤—Å–∫–∞—è': '–º–æ—Å–∫–æ–≤',
        '–∫—É—Ä—Å–∫–∞—è': '–∫—É—Ä—Å–∫',
        '–∫–µ–º–µ—Ä–æ–≤—Å–∫–∞—è': '–∫–µ–º–µ—Ä–æ–≤',
        '—Å–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è': '—Å–≤–µ—Ä–¥–ª–æ–≤',
        '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è': '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥',
        '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è': '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        '—Ç–∞–º–±–æ–≤—Å–∫–∞—è': '—Ç–∞–º–±–æ–≤',
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞—è': '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
        '–æ–±–ª–∞—Å—Ç—å': '',
        '–æ–±–ª': '',
        '–∫—Ä–∞–π': '',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '',
        '—Ä–µ—Å–ø': '',
        '  ': ' '
    }
    for old, new in replacements.items():
        text = text.replace(old, new)
    return text.strip()

def extract_city_and_region(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()
    
    region_keywords = [
        '–æ–±–ª–∞—Å—Ç', '–∫—Ä–∞–π', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–æ–∫—Ä—É–≥', 
        '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥', '–º–æ—Å–∫–æ–≤', '–∫—É—Ä—Å–∫', '–∫–µ–º–µ—Ä–æ–≤',
        '—Å–≤–µ—Ä–¥–ª–æ–≤', '–Ω–∏–∂–µ–≥–æ—Ä–æ–¥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '—Ç–∞–º–±–æ–≤',
        '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
    ]
    
    words = text.split()
    
    if len(words) == 1:
        return text, None
    
    city_words = []
    region_words = []
    region_found = False
    
    for word in words:
        word_lower = word.lower()
        if not region_found and any(keyword in word_lower for keyword in region_keywords):
            region_found = True
            region_words.append(word)
        elif region_found:
            region_words.append(word)
        else:
            city_words.append(word)
    
    city = ' '.join(city_words) if city_words else text
    region = ' '.join(region_words) if region_words else None
    
    return city, region

def check_if_changed(original, matched):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - –ü–†–û–°–¢–û–ï –°–†–ê–í–ù–ï–ù–ò–ï"""
    if matched is None:
        return False
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    original_clean = original.strip()
    matched_clean = matched.strip()
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ—Ç
    # –ï—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ö–æ—Ç—å —á–µ–º-—Ç–æ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å—Ç—å
    return original_clean != matched_clean

def smart_match_city(client_city, hh_city_names, hh_areas, threshold=85):
    """–£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
    
    city_part, region_part = extract_city_and_region(client_city)
    city_part_lower = city_part.lower().strip()
    
    # –®–ê–ì 1: –¢–û–ß–ù–´–ô –ü–û–ò–°–ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    exact_matches = []
    exact_matches_with_region = []
    
    for hh_city_name in hh_city_names:
        hh_city_base = hh_city_name.split('(')[0].strip().lower()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if city_part_lower == hh_city_base:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–µ–≥–∏–æ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
            if region_part:
                region_normalized = normalize_region_name(region_part)
                hh_normalized = normalize_region_name(hh_city_name)
                
                if region_normalized in hh_normalized:
                    # –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –∏ –≥–æ—Ä–æ–¥, –∏ —Ä–µ–≥–∏–æ–Ω
                    exact_matches_with_region.append(hh_city_name)
                else:
                    # –ì–æ—Ä–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ —Ä–µ–≥–∏–æ–Ω –¥—Ä—É–≥–æ–π
                    exact_matches.append(hh_city_name)
            else:
                # –ì–æ—Ä–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ä–µ–≥–∏–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
                exact_matches.append(hh_city_name)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º, –ø–æ—Ç–æ–º –±–µ–∑
    if exact_matches_with_region:
        best_match = exact_matches_with_region[0]
        score = fuzz.WRatio(client_city.lower(), best_match.lower())
        return (best_match, score, 0)
    elif exact_matches:
        best_match = exact_matches[0]
        score = fuzz.WRatio(client_city.lower(), best_match.lower())
        return (best_match, score, 0)
    
    # –®–ê–ì 2: –ù–ï–ß–ï–¢–ö–ò–ô –ü–û–ò–°–ö (–µ—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏)
    candidates = process.extract(
        client_city,
        hh_city_names,
        scorer=fuzz.WRatio,
        limit=10
    )
    
    if not candidates:
        return None
    
    candidates = [c for c in candidates if c[1] >= threshold]
    
    if not candidates:
        return None
    
    if len(candidates) == 1:
        return candidates[0]
    
    # –®–ê–ì 3: –£–ú–ù–´–ô –í–´–ë–û–† –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    best_match = None
    best_score = 0
    
    client_city_lower = client_city.lower()
    
    for candidate_name, score, _ in candidates:
        candidate_lower = candidate_name.lower()
        adjusted_score = score
        
        candidate_city = candidate_name.split('(')[0].strip().lower()
        
        # –ö–†–ò–¢–ï–†–ò–ô 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if city_part_lower == candidate_city:
            adjusted_score += 50
        elif city_part_lower in candidate_city:
            adjusted_score += 30
        elif candidate_city in city_part_lower:
            adjusted_score += 20
        else:
            adjusted_score -= 30
        
        # –ö–†–ò–¢–ï–†–ò–ô 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞
        if region_part:
            region_normalized = normalize_region_name(region_part)
            candidate_normalized = normalize_region_name(candidate_name)
            
            if region_normalized in candidate_normalized:
                adjusted_score += 40
            elif '(' in candidate_name:
                adjusted_score -= 25
        
        # –ö–†–ò–¢–ï–†–ò–ô 3: –ó–∞—â–∏—Ç–∞ –æ—Ç "–ø–æ—Ö–æ–∂–∏—Ö"
        len_diff = abs(len(candidate_city) - len(city_part_lower))
        if len_diff > 3:
            adjusted_score -= 20
        
        # –ö–†–ò–¢–ï–†–ò–ô 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        if len(candidate_city) > len(city_part_lower) + 4:
            adjusted_score -= 25
        
        # –ö–†–ò–¢–ï–†–ò–ô 5: –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if len(candidate_name) > 15 and len(client_city) > 15:
            adjusted_score += 5
        
        # –ö–†–ò–¢–ï–†–ò–ô 6: –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏/–∫—Ä–∞—è
        region_keywords = ['–æ–±–ª–∞—Å—Ç', '–∫—Ä–∞–π', '—Ä–µ—Å–ø—É–±–ª–∏–∫', '–æ–∫—Ä—É–≥']
        client_has_region = any(keyword in client_city_lower for keyword in region_keywords)
        candidate_has_region = any(keyword in candidate_lower for keyword in region_keywords)
        
        if client_has_region and candidate_has_region:
            adjusted_score += 15
        elif client_has_region and not candidate_has_region:
            adjusted_score -= 15
        
        if adjusted_score > best_score:
            best_score = adjusted_score
            best_match = (candidate_name, score, _)
    
    return best_match if best_match else candidates[0]

def match_cities(client_cities, hh_areas, threshold=85):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥–∞ —Å –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    results = []
    hh_city_names = list(hh_areas.keys())
    
    seen_original_cities = {}
    seen_hh_cities = {}
    
    duplicate_original_count = 0
    duplicate_hh_count = 0
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for idx, client_city in enumerate(client_cities):
        progress = (idx + 1) / len(client_cities)
        progress_bar.progress(progress)
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx + 1} –∏–∑ {len(client_cities)} –≥–æ—Ä–æ–¥–æ–≤...")
        
        if pd.isna(client_city) or str(client_city).strip() == "":
            results.append({
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city,
                '–ù–∞–∑–≤–∞–Ω–∏–µ HH': None,
                'ID HH': None,
                '–†–µ–≥–∏–æ–Ω': None,
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': '–ù–µ—Ç',
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
            })
            continue
        
        client_city_original = str(client_city).strip()
        client_city_normalized = client_city_original.lower().strip()
        
        if client_city_normalized in seen_original_cities:
            duplicate_original_count += 1
            original_result = seen_original_cities[client_city_normalized]
            results.append({
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                '–ù–∞–∑–≤–∞–Ω–∏–µ HH': original_result['–ù–∞–∑–≤–∞–Ω–∏–µ HH'],
                'ID HH': original_result['ID HH'],
                '–†–µ–≥–∏–æ–Ω': original_result['–†–µ–≥–∏–æ–Ω'],
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': original_result['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'],
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': original_result['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'],
                '–°—Ç–∞—Ç—É—Å': 'üîÑ –î—É–±–ª–∏–∫–∞—Ç (–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)'
            })
            continue
        
        match = smart_match_city(client_city_original, hh_city_names, hh_areas, threshold)
        
        if match:
            matched_name = match[0]
            score = match[1]
            hh_info = hh_areas[matched_name]
            hh_city_normalized = hh_info['name'].lower().strip()
            
            # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ç—Ä–æ–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –∏–ª–∏ –Ω–µ—Ç
            is_changed = check_if_changed(client_city_original, hh_info['name'])
            change_status = '–î–∞' if is_changed else '–ù–µ—Ç'
            
            if hh_city_normalized in seen_hh_cities:
                duplicate_hh_count += 1
                city_result = {
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                    '–ù–∞–∑–≤–∞–Ω–∏–µ HH': hh_info['name'],
                    'ID HH': hh_info['id'],
                    '–†–µ–≥–∏–æ–Ω': hh_info['parent'],
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': round(score, 1),
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': change_status,
                    '–°—Ç–∞—Ç—É—Å': 'üîÑ –î—É–±–ª–∏–∫–∞—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç HH)'
                }
                results.append(city_result)
                seen_original_cities[client_city_normalized] = city_result
            else:
                status = '‚úÖ –¢–æ—á–Ω–æ–µ' if score >= 95 else '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ'
                
                city_result = {
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                    '–ù–∞–∑–≤–∞–Ω–∏–µ HH': hh_info['name'],
                    'ID HH': hh_info['id'],
                    '–†–µ–≥–∏–æ–Ω': hh_info['parent'],
                    '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': round(score, 1),
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': change_status,
                    '–°—Ç–∞—Ç—É—Å': status
                }
                
                results.append(city_result)
                seen_original_cities[client_city_normalized] = city_result
                seen_hh_cities[hh_city_normalized] = True
        else:
            city_result = {
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city_original,
                '–ù–∞–∑–≤–∞–Ω–∏–µ HH': None,
                'ID HH': None,
                '–†–µ–≥–∏–æ–Ω': None,
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ': '–ù–µ—Ç',
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
            }
            
            results.append(city_result)
            seen_original_cities[client_city_normalized] = city_result
    
    progress_bar.empty()
    status_text.empty()
    
    total_duplicates = duplicate_original_count + duplicate_hh_count
    
    return pd.DataFrame(results), duplicate_original_count, duplicate_hh_count, total_duplicates

# ============================================
# –ò–ù–¢–ï–†–§–ï–ô–°
# ============================================

st.title("üåç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å HH.ru")
st.markdown("---")

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    threshold = st.slider(
        "–ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (%)",
        min_value=50,
        max_value=100,
        value=85,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
    )
    
    st.markdown("---")
    st.markdown("### üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.markdown("""
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV
    2. –ì–æ—Ä–æ–¥–∞ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    3. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å"
    4. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """)
    
    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç—É—Å—ã")
    st.markdown("""
    - ‚úÖ **–¢–æ—á–Ω–æ–µ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â•95%
    - ‚ö†Ô∏è **–ü–æ—Ö–æ–∂–µ–µ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â•–ø–æ—Ä–æ–≥–∞
    - üîÑ **–î—É–±–ª–∏–∫–∞—Ç (–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)** - –ø–æ–≤—Ç–æ—Ä –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
    - üîÑ **–î—É–±–ª–∏–∫–∞—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç HH)** - —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Üí –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ HH
    - ‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ** - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ <–ø–æ—Ä–æ–≥–∞
    """)
    
    st.markdown("---")
    st.markdown("### üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ")
    st.markdown("""
    - **–î–∞** - "–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" ‚â† "–ù–∞–∑–≤–∞–Ω–∏–µ HH"
    - **–ù–µ—Ç** - —Å—Ç—Ä–æ–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    
    –ü—Ä–∏–º–µ—Ä—ã:
    - "–ê–ø—Ä–µ–ª–µ–≤–∫–∞" ‚Üí "–ê–ø—Ä–µ–ª–µ–≤–∫–∞ (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)" = **–î–∞** ‚úÖ
    - "–ú–æ—Å–∫–≤–∞" ‚Üí "–ú–æ—Å–∫–≤–∞" = **–ù–µ—Ç** ‚úÖ
    - "–ü–∏—Ç–µ—Ä" ‚Üí "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" = **–î–∞** ‚úÖ
    - "–ë–∞–ª–∞—à–∏—Ö–∞" ‚Üí "–ë–∞–ª–∞—à–∏—Ö–∞ (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)" = **–î–∞** ‚úÖ
    """)
    
    st.markdown("---")
    st.success("""
    ‚ú® **–£–º–Ω—ã–π –ø–æ–∏—Å–∫ v2.3:**
    
    **–ò–∑–º–µ–Ω–µ–Ω–∏–µ = –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫**
    - –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã ‚Üí "–î–∞"
    - –ï—Å–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã ‚Üí "–ù–µ—Ç"
    """)

col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≥–æ—Ä–æ–¥–∞–º–∏",
        type=['xlsx', 'csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx) –∏ CSV"
    )
    
    with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"):
        example_df = pd.DataFrame({
            '–ì–æ—Ä–æ–¥': ['–ú–æ—Å–∫–≤–∞', '–ü–∏—Ç–µ—Ä', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±']
        })
        st.dataframe(example_df, use_container_width=True)

with col2:
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    try:
        hh_areas = get_hh_areas()
        st.success(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH –∑–∞–≥—Ä—É–∂–µ–Ω: **{len(hh_areas)}** –≥–æ—Ä–æ–¥–æ–≤")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {str(e)}")
        hh_areas = None

if uploaded_file is not None and hh_areas is not None:
    st.markdown("---")
    
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        client_cities = df.iloc[:, 0].tolist()
        st.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ **{len(client_cities)}** –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", type="primary", use_container_width=True):
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."):
                result_df, dup_original, dup_hh, total_dup = match_cities(client_cities, hh_areas, threshold)
                st.session_state.result_df = result_df
                st.session_state.dup_original = dup_original
                st.session_state.dup_hh = dup_hh
                st.session_state.total_dup = total_dup
                st.session_state.processed = True
        
        if st.session_state.processed and st.session_state.result_df is not None:
            result_df = st.session_state.result_df
            dup_original = st.session_state.dup_original
            dup_hh = st.session_state.dup_hh
            total_dup = st.session_state.total_dup
            
            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            
            total = len(result_df)
            exact = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚úÖ –¢–æ—á–Ω–æ–µ'])
            similar = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ'])
            duplicates = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)])
            not_found = len(result_df[result_df['–°—Ç–∞—Ç—É—Å'] == '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'])
            changed = len(result_df[result_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] == '–î–∞'])
            
            col1.metric("–í—Å–µ–≥–æ", total)
            col2.metric("‚úÖ –¢–æ—á–Ω—ã—Ö", exact, f"{exact/total*100:.1f}%")
            col3.metric("‚ö†Ô∏è –ü–æ—Ö–æ–∂–∏—Ö", similar, f"{similar/total*100:.1f}%")
            col4.metric("üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤", duplicates, f"{duplicates/total*100:.1f}%")
            col5.metric("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", not_found, f"{not_found/total*100:.1f}%")
            col6.metric("üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ", changed, f"{changed/total*100:.1f}%")
            
            if duplicates > 0:
                st.warning(f"""
                ‚ö†Ô∏è **–ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:**
                - üîÑ –ü–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é: **{dup_original}**
                - üîÑ –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É HH: **{dup_hh}**
                
                –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞.
                """)
            
            if changed > 0:
                st.info(f"""
                üîÑ **–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: {changed}**
                
                –ì–æ—Ä–æ–¥–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.
                """)
            
            st.markdown("---")
            st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
            
            filter_col1, filter_col2 = st.columns(2)
            
            with filter_col1:
                status_filter = st.multiselect(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                    options=[
                        '‚úÖ –¢–æ—á–Ω–æ–µ', 
                        '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ', 
                        'üîÑ –î—É–±–ª–∏–∫–∞—Ç (–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)',
                        'üîÑ –î—É–±–ª–∏–∫–∞—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç HH)',
                        '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
                    ],
                    default=[
                        '‚úÖ –¢–æ—á–Ω–æ–µ', 
                        '‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ–µ', 
                        'üîÑ –î—É–±–ª–∏–∫–∞—Ç (–∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)',
                        'üîÑ –î—É–±–ª–∏–∫–∞—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç HH)',
                        '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
                    ],
                    key='status_filter'
                )
            
            with filter_col2:
                search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "", key='search_input')
            
            filtered_df = result_df[result_df['–°—Ç–∞—Ç—É—Å'].isin(status_filter)]
            
            if search_term:
                filtered_df = filtered_df[
                    filtered_df['–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'].str.contains(search_term, case=False, na=False) |
                    filtered_df['–ù–∞–∑–≤–∞–Ω–∏–µ HH'].str.contains(search_term, case=False, na=False)
                ]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (–î–∞), –ø–æ—Ç–æ–º –ø–æ "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %" –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            filtered_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_sort'] = filtered_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'].map({'–î–∞': 0, '–ù–µ—Ç': 1})
            filtered_df = filtered_df.sort_values(
                by=['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_sort', '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %'], 
                ascending=[True, True]
            ).drop('–ò–∑–º–µ–Ω–µ–Ω–∏–µ_sort', axis=1).reset_index(drop=True)
            
            st.dataframe(
                filtered_df,
                use_container_width=True,
                height=400,
                column_config={
                    "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %": st.column_config.NumberColumn(
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %",
                        help="–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –±–∞–∑–æ–π HH",
                        format="%.1f"
                    ),
                    "ID HH": st.column_config.NumberColumn(
                        "ID HH",
                        help="ID –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ HH"
                    ),
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": st.column_config.TextColumn(
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ",
                        help="–ë—ã–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
                    )
                }
            )
            
            st.caption("üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.")
            
            st.markdown("---")
            st.subheader("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            col1, col2 = st.columns(2)
            
            with col1:
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    result_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç')
                output.seek(0)
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (Excel)",
                    data=output,
                    file_name=f"result_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                    key='download_full'
                )
            
            with col2:
                unique_df = result_df[~result_df['–°—Ç–∞—Ç—É—Å'].str.contains('–î—É–±–ª–∏–∫–∞—Ç', na=False)]
                publisher_df = pd.DataFrame({'–ù–∞–∑–≤–∞–Ω–∏–µ HH': unique_df['–ù–∞–∑–≤–∞–Ω–∏–µ HH']})
                publisher_df = publisher_df.dropna()
                
                output_publisher = io.BytesIO()
                with pd.ExcelWriter(output_publisher, engine='openpyxl') as writer:
                    publisher_df.to_excel(writer, index=False, header=False, sheet_name='–ì–µ–æ')
                output_publisher.seek(0)
                
                unique_count = len(publisher_df)
                
                st.download_button(
                    label=f"üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ ({unique_count} –≥–æ—Ä–æ–¥–æ–≤)",
                    data=output_publisher,
                    file_name=f"geo_for_publisher_{uploaded_file.name.rsplit('.', 1)[0]}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                    type="primary",
                    key='download_publisher'
                )
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è | –î–∞–Ω–Ω—ã–µ –∏–∑ API HH.ru</div>",
    unsafe_allow_html=True
)
