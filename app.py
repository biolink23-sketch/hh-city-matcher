import streamlit as st
import requests
import pandas as pd
from rapidfuzz import fuzz, process
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å HH.ru",
    page_icon="üåç",
    layout="wide"
)

# ============================================
# –§–£–ù–ö–¶–ò–ò
# ============================================
@st.cache_data(ttl=3600)
def get_hh_areas():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ HH.ru"""
    response = requests.get('https://api.hh.ru/areas')
    data = response.json()
    
    areas_dict = {}
    
    def parse_areas(areas, parent_name=""):
        for area in areas:
            area_id = area['id']
            area_name = area['name']
            
            areas_dict[area_name] = {
                'id': area_id,
                'name': area_name,
                'parent': parent_name
            }
            
            if area.get('areas'):
                parse_areas(area['areas'], area_name)
    
    parse_areas(data)
    return areas_dict

def match_cities(client_cities, hh_areas, threshold=80):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥–∞"""
    results = []
    hh_city_names = list(hh_areas.keys())
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for idx, client_city in enumerate(client_cities):
        progress = (idx + 1) / len(client_cities)
        progress_bar.progress(progress)
        status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx + 1} –∏–∑ {len(client_cities)} –≥–æ—Ä–æ–¥–æ–≤...")
        
        if pd.isna(client_city) or str(client_city).strip() == "":
            results.append({
                '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': client_city,
                '–ù–∞–∑–≤–∞–Ω–∏–µ HH': None,
                'ID HH': None,
                '–†–µ–≥–∏–æ–Ω': None,
                '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ %': 0,
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
            })
            continue
        
        client_city = str(client_city).strip()
        
        match = process.extractOne(
            client_city,
            hh_city_names,
            scorer=fuzz.WRatio,
            score_cutoff=threshold
        )
        
        if match:
            matched_name = match[0]
            score = match[1]
            hh_info = hh_areas[matched_
